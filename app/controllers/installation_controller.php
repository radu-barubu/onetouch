<?php

Configure::write('Session.save', 'php');

class InstallationController extends Controller {

	public $name = 'Install';
	
	public $useTable = null;
	
	public $uses = array();
	
	public $validate = array();
	
	private static $default_connection = null;

	
	public function Index()
	{
		App::import('Model', 'ConnectionManager', false);
		App::Import('Lib','xinstall');
		
		$db_file = CONFIGS."database.php";
		
		if(!is_writable($db_file)) 
		{
			$this->set('error',1);
			$this->Session->setFlash("Database File: $db_file is not writtable. Please Chmod 777. If the system has been installed, please check the database password and connection to see if there is any problem.");
			$this->cakeError('dbConfigChmod');
			return;
		}
		
		$db = ConnectionManager::getInstance();
		$connected = $db->getDataSource('default');
		
		if(!$connected->isConnected())
		{
			$this->set('error',1);
			$this->Session->setFlash("If the system has been installed, please check the database password and connection to see if there is any problem.");
			$this->cakeError('dbConfigChmod');
			return;
		}
  		
		$db = ConnectionManager::getDataSource('default');
		$tables = $db->listSources();
		
		if(!empty($tables)) {
			
			$this->redirect(array('controller' => 'administration','action'=> 'login'), null, true);
		}
		
		if(isset($this->params['data']) && $data = $this->params['data']) {
			$config = $data['install'];
			
			$link = @mysql_connect($config['host'],$config['db_user'],$config['password']);
			
			
			if(!$link) {
				
				$this->set('config',$config);
				
				$this->set('PracticeSetting',$data['PracticeSetting']);
			
				$this->Session->setFlash("Could not connect to database.");
			} else {
				
				$db_name = $config['db_name'];
				
				$updates_dir = realpath("../../") . DS . "database/";
				
				mysql_select_db($db_name);
				
				if(mysql_errno()==1049) {
					
					if(!@mysql_query("CREATE DATABASE $db_name")) {
						$this->cakeError('customDbError', array("db_name"=> $db_name));
					}
				}
				
				$dirs = $this->_updateDirs($updates_dir);
		
				$data = null;
				$data = $this->process($dirs);
					
				$this->set('response', $data);
				$this->set('updates_dir', $updates_dir);
				$this->set('dirs', $dirs);
				$this->set('steps', $this->_steps());
				
			
				$content = file_get_contents($db_file);
				
				self::$default_connection = "//generated by installer\n\nvar \$default = array(\n\t\t'driver' => 'mysql',\n\t\t'persistent' => false,\n\t\t'host' => '{$config['host']}',\n\t\t'login' => '{$config['db_user']}',\n\t\t'password' => '{$config['password']}',\n\t\t'database' => '{$config['db_name']}',\n\t\t'prefix' => '',\n\t\t);\n";
				
				$out = preg_replace("/(var\s\\\$([\w]+).+?\)\;...)+/se", "self::db_modify('$2','$1')", $content);
				
				if(is_writable($db_file)) {
					site::write($out,$db_file);
				}
				
				$this->redirect($this->base."/../",null, true);
			}
		}
		
	}
	
	
	
	public function db_modify($connection_name,$current_connection)
	{
		if($connection_name=='default') {
			return self::$default_connection;
		}
		return $current_connection;
	}
	
	
	function process($dirs)
	{
		$updates_dir = realpath("../../") . DS . "database/";
		
		foreach($dirs as $k => $v) {
			
			$sql_dir = $updates_dir.$v;
			
			if(file_exists($f = $sql_dir)) {
				$response = xinstall::runQueries($f);
				
				$data[$k] = "
				<pre>
				".basename($f)."
				***************************
				</pre>
				";
		
				$data[$k].= implode("\n<br />",$response);
				
			} else {
				
				die("$f does not exist");
			}
		}
		
		return $data;
	}
	
	private function _updateDirs($updates_dir)
	{
		$dir = scandir($updates_dir);
		unset($dir[0],$dir[1]);
		//array_multisort($dir,SORT_DESC);
		foreach($dir as $k => $v) {
			if(strpos($v,".sql")===false) {
				unset($dir[$k]);
			}
		}
		
		//array_unshift($dir, "startup.sql");//, "test_data.sql");
		
		@array_shift($dir, "test.sql");
		
		$dir = array_unique($dir);
		
	//	die("<pre>".print_r($dir,1));
		
		$remove = array('codes.sql','test_data.sql');
		
		$remove = array_flip($remove);
		
		foreach($dir as $k => $v) {
			if(isset($remove[$v])) {
				unset($dir[$k]);
			}
		}
		return $dir;
	}
	
    function _steps()
    {
    	$array = array(
	    	//1=> 'Permissions',
	    	2=> 'Install Database Tables &amp; Data',
	    	3=>'Default Settings &amp; Configuration',
	    	4=>'Admin Settings & Finish'
    	);

    	return $array;
    }
}

?>